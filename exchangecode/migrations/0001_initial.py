# Generated by Django 4.1.3 on 2023-01-10 13:32

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_name', models.CharField(max_length=64, unique=True, verbose_name='区域名称')),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_name', models.CharField(max_length=64, unique=True, verbose_name='批次名称')),
                ('expire_time', models.DateField(verbose_name='过期时间')),
                ('area_id', models.IntegerField(verbose_name='所属区域')),
                ('exchange_link', models.CharField(max_length=255, verbose_name='兑换链接')),
                ('create_user', models.CharField(max_length=64, null=True, verbose_name='创建人')),
                ('create_time', models.DateTimeField(null=True, verbose_name='创建时间')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(max_length=64, unique=True, verbose_name='分校名称')),
                ('area', models.ForeignKey(on_delete=models.SET(0), to='exchangecode.area', verbose_name='所属区域id')),
            ],
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_name', models.CharField(max_length=64, unique=True, verbose_name='兑换码')),
                ('school_id', models.IntegerField(null=True, verbose_name='所属分校')),
                ('status', models.IntegerField(choices=[(1, '空闲'), (2, '已使用')], default=1, verbose_name='使用状态:1空闲,2已使用(默认为0)')),
                ('student_name', models.CharField(max_length=64, null=True, verbose_name='学生姓名')),
                ('student_grade', models.CharField(max_length=10, null=True, verbose_name='学生年级')),
                ('student_major', models.CharField(max_length=10, null=True, verbose_name='学生专业')),
                ('operator_user', models.CharField(max_length=64, null=True, verbose_name='操作人')),
                ('operator_time', models.DateTimeField(null=True, verbose_name='操作时间')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exchangecode.batch', verbose_name='批次号')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_num', models.CharField(max_length=11, unique=True, verbose_name='手机号')),
                ('area_id', models.ForeignKey(null=True, on_delete=models.SET(1), to='exchangecode.area', verbose_name='所属区域')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('school_id', models.ForeignKey(null=True, on_delete=models.SET(1), to='exchangecode.school', verbose_name='所属分校')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
